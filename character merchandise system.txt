"""
This Python program implements a character merchandise management system.
It is designed to manage information about different Intellectual Properties (IPs),
such as those from anime, real - life stars, etc., and their associated merchandise.
The system supports various operations including adding IPs, adding merchandise,
deleting merchandise, updating merchandise information, finding merchandise and
their prices, displaying all IPs and merchandise, and sorting merchandise by price.
"""


class IP:
    """
    The IP class represents an Intellectual Property (e.g., an anime series, a real - life star).
    It manages the official and fan - made merchandise related to this IP.

    Attributes:
        ip_id (int): A unique identifier for the IP.
        name (str): The name of the IP.
        category (str): The category the IP belongs to, such as "Real - star" or "Anime".
        official_merch (list): A list to store official merchandise related to the IP.
        fan_merch (list): A list to store fan - made merchandise related to the IP.
    """

    def __init__(self, ip_id, name, category):
        """
        Initialize an IP object.

        Args:
            ip_id (int): A unique identifier for the IP.
            name (str): The name of the IP.
            category (str): The category the IP belongs to.
        """
        self.ip_id = ip_id
        self.name = name
        self.category = category
        self.official_merch = []
        self.fan_merch = []

    def add_merch(self, merch, is_official):
        """
        Add a piece of merchandise to the appropriate list (official or fan - made).

        Args:
            merch (Merchandise): The merchandise object to be added.
            is_official (bool): True if the merchandise is official, False if it's fan - made.
        """
        if is_official:
            self.official_merch.append(merch)
        else:
            self.fan_merch.append(merch)

    def remove_merch(self, merch_name):
        """
        Remove a piece of merchandise by its name from either the official or fan - made list.

        Args:
            merch_name (str): The name of the merchandise to be removed.

        Returns:
            bool: True if the merchandise was successfully removed, False if not found.
        """
        for merch_list in [self.official_merch, self.fan_merch]:
            for i, merch in enumerate(merch_list):
                if merch.name == merch_name:
                    del merch_list[i]
                    return True
        return False

    def update_merch(self, merch, new_name, new_price, new_type, new_note):
        """
        Update the information of a piece of merchandise.

        Args:
            merch (Merchandise): The merchandise object to be updated.
            new_name (str): The new name for the merchandise. If None, the original name is kept.
            new_price (float or None): The new price for the merchandise. If None, the original price is kept.
            new_type (str): The new type for the merchandise. If None, the original type is kept.
            new_note (str): The new note for the merchandise. If None, the original note is kept.

        Returns:
            bool: Always returns True as the update operation is assumed to be successful.
        """
        merch.name = new_name if new_name else merch.name
        merch.price = new_price if new_price is not None else merch.price
        merch.type = new_type if new_type else merch.type
        merch.note = new_note if new_note else merch.note
        return True

    def find_merch(self, merch_name):
        """
        Find a piece of merchandise by its name in either the official or fan - made list.

        Args:
            merch_name (str): The name of the merchandise to be found.

        Returns:
            Merchandise or None: The merchandise object if found, otherwise None.
        """
        for merch_list in [self.official_merch, self.fan_merch]:
            for merch in merch_list:
                if merch.name == merch_name:
                    return merch
        return None

    def sort_merch_by_price(self):
        """
        Sort the official and fan - made merchandise lists by price in ascending order
        and print the sorted lists.
        """
        self.official_merch.sort(key=lambda x: x.price)
        self.fan_merch.sort(key=lambda x: x.price)
        print(f"Merchandise for IP {self.name} sorted by price successfully.")
        print("Official Merchandise:")
        if not self.official_merch:
            print("  None")
        else:
            for merch in self.official_merch:
                print(f"  {merch}")
        print("Fan - made Merchandise:")
        if not self.fan_merch:
            print("  None")
        else:
            for merch in self.fan_merch:
                print(f"  {merch}")


class Merchandise:
    """
    The Merchandise class represents a piece of merchandise.

    Attributes:
        merch_id (int): A unique identifier for the merchandise.
        name (str): The name of the merchandise.
        price (float): The price of the merchandise.
        type (str): The type of the merchandise, such as "Acrylic", "Tin Badge", etc.
        note (str): Optional note about the merchandise.
    """

    def __init__(self, merch_id, name, price, type, note=""):
        """
        Initialize a Merchandise object.

        Args:
            merch_id (int): A unique identifier for the merchandise.
            name (str): The name of the merchandise.
            price (float): The price of the merchandise.
            type (str): The type of the merchandise.
            note (str): Optional note about the merchandise, default is an empty string.
        """
        self.merch_id = merch_id
        self.name = name
        self.price = price
        self.type = type
        self.note = note

    def __str__(self):
        """
        Return a string representation of the Merchandise object.

        Returns:
            str: A formatted string with merchandise details.
        """
        return f"ID: {self.merch_id}, Name: {self.name}, Price: {self.price}, Type: {self.type}, Note: {self.note}"


class MerchandiseManagementSystem:
    """
    The MerchandiseManagementSystem class manages the overall merchandise management system.
    It keeps track of IPs and their associated merchandise.

    Attributes:
        ips (dict): A dictionary to store IP objects, with IP IDs as keys.
        next_ip_id (int): The next available IP ID for creating new IPs.
        next_merch_id (int): The next available merchandise ID for creating new merchandise.
        material_codes (dict): A dictionary mapping material codes to their full names.
    """

    def __init__(self):
        """
        Initialize a MerchandiseManagementSystem object.
        """
        self.ips = {}
        self.next_ip_id = 1
        self.next_merch_id = 1
        self.material_codes = {
            'a': 'Acrylic',
            't': 'Tin Badge',
            'p': 'Plush',
            'pp': 'Paper Product',
            'o': 'Others'
        }

    def add_ip(self, name, category):
        """
        Add a new IP to the system.

        Args:
            name (str): The name of the new IP.
            category (str): The category of the new IP.
        """
        ip_id = self.next_ip_id
        new_ip = IP(ip_id, name, category)
        self.ips[ip_id] = new_ip
        self.next_ip_id += 1
        print(f"IP {name} (ID: {ip_id}) in category {category} added successfully.")

    def display_ips(self):
        """
        Display all the IPs in the system.
        """
        if not self.ips:
            print("No IPs found.")
        else:
            for ip in self.ips.values():
                print(f"ID: {ip.ip_id}, Name: {ip.name}, Category: {ip.category}")

    def add_merchandise(self):
        """
        Add a new piece of merchandise to the system.
        The user can choose to add it to a new IP or an existing one.
        """
        while True:
            print("Do you want to add a new IP? (yes/no)")
            choice = input().lower()
            if choice in ['yes', 'no']:
                break
            print("Invalid input. Please enter 'yes' or 'no'.")

        if choice == "yes":
            name = input("Enter the IP name: ")
            while True:
                category_input = input("Enter the IP category (R for Real - star, A for Anime): ").upper()
                if category_input == 'R':
                    category = "Real - star"
                    break
                elif category_input == 'A':
                    category = "Anime"
                    break
                else:
                    print("Invalid input. Please enter 'R' for Real - star or 'A' for Anime.")
            self.add_ip(name, category)
            ip = self.ips[self.next_ip_id - 1]
        else:
            while True:
                self.display_ips()
                try:
                    ip_id = int(input("Enter the ID of the existing IP: "))
                    if ip_id in self.ips:
                        ip = self.ips[ip_id]
                        break
                    else:
                        print("Invalid IP ID. Please re - enter.")
                except ValueError:
                    print("Invalid input. Please enter a valid integer for IP ID.")

        merch_name = input("Enter the merchandise name: ")
        while True:
            price_input = input("Enter the merchandise price: ")
            try:
                price = float(price_input) if price_input else 0
                break
            except ValueError:
                print("Invalid price input. Please enter a valid number.")

        print(
            "Available merchandise types and their codes: a - Acrylic, t - Tin Badge, p - Plush, pp - Paper Product, o - Others")
        while True:
            type_input = input("Enter the merchandise type code: ").lower()
            if type_input in self.material_codes:
                merch_type = self.material_codes[type_input]
                break
            else:
                print("Invalid type code. Please re - enter.")

        note = input("Enter a note for the merchandise (leave blank if none): ")

        merch_id = self.next_merch_id
        merch = Merchandise(merch_id, merch_name, price, merch_type, note)
        while True:
            is_official_input = input("Is it an official merchandise? (yes/no): ").lower()
            if is_official_input in ['yes', 'no']:
                is_official = is_official_input == "yes"
                break
            print("Invalid input. Please enter 'yes' or 'no'.")

        ip.add_merch(merch, is_official)
        self.next_merch_id += 1
        print(f"Merchandise {merch_name} (ID: {merch_id}) added to IP {ip.name} successfully.")

    def delete_merchandise(self):
        """
        Delete a piece of merchandise from an IP in the system.
        """
        while True:
            self.display_ips()
            try:
                ip_id = int(input("Enter the ID of the IP: "))
                if ip_id in self.ips:
                    ip = self.ips[ip_id]
                    break
                else:
                    print("Invalid IP ID. Please re - enter.")
            except ValueError:
                print("Invalid input. Please enter a valid integer for IP ID.")

        merch_name = input("Enter the name of the merchandise to delete: ")
        if ip.remove_merch(merch_name):
            print(f"Merchandise with name {merch_name} deleted successfully.")
        else:
            print(f"Merchandise with name {merch_name} not found.")

    def update_merchandise(self):
        """
        Update the information of a piece of merchandise in the system.
        """
        while True:
            self.display_ips()
            try:
                ip_id = int(input("Enter the ID of the IP: "))
                if ip_id in self.ips:
                    ip = self.ips[ip_id]
                    break
                else:
                    print("Invalid IP ID. Please re - enter.")
            except ValueError:
                print("Invalid input. Please enter a valid integer for IP ID.")

        print(f"\nAvailable Merchandise for IP {ip.name}:")
        print("Official Merchandise:")
        for merch in ip.official_merch:
            print(f"  {merch}")
        print("Fan - made Merchandise:")
        for merch in ip.fan_merch:
            print(f"  {merch}")

        merch_name = input("Enter the name of the merchandise to update: ")
        merch = ip.find_merch(merch_name)
        if not merch:
            print(f"Merchandise with name {merch_name} not found.")
            return
        current_name = merch.name
        current_price = merch.price
        current_type = merch.type
        current_note = merch.note

        new_name = input(f"Enter new name (current: {current_name}, leave blank to keep): ")

        while True:
            price_input = input(f"Enter new price (current: {current_price}, leave blank to keep): ")
            try:
                new_price = float(price_input) if price_input else None
                break
            except ValueError:
                print("Invalid price input. Please enter a valid number.")

        print(
            "Available merchandise types and their codes: a - Acrylic, t - Tin Badge, p - Plush, pp - Paper Product, o - Others")
        while True:
            type_input = input(f"Enter new type code (current: {current_type}, leave blank to keep): ").lower()
            if not type_input:
                new_type = current_type
                break
            elif type_input in self.material_codes:
                new_type = self.material_codes[type_input]
                break
            else:
                print("Invalid type code. Please re - enter.")
        new_note = input(f"Enter new note (current: {current_note}, leave blank to keep): ")

        if ip.update_merch(merch, new_name, new_price, new_type, new_note):
            print(f"Merchandise with name {merch_name} updated successfully.")
        else:
            print(f"Failed to update merchandise with name {merch_name}.")

    def find_merchandise(self):
        """
        Find a piece of merchandise in the system by its name under a specific IP.
        """
        while True:
            self.display_ips()
            try:
                ip_id = int(input("Enter the ID of the IP: "))
                if ip_id in self.ips:
                    ip = self.ips[ip_id]
                    break
                else:
                    print("Invalid IP ID. Please re - enter.")
            except ValueError:
                print("Invalid input. Please enter a valid integer for IP ID.")

        merch_name = input("Enter the name of the merchandise to find: ")
        merch = ip.find_merch(merch_name)
        if merch:
            print(merch)
        else:
            print(f"Merchandise with name {merch_name} not found.")

    def find_merchandise_price(self):
        """
        Find the price of a piece of merchandise in the system by its name under a specific IP.
        """
        while True:
            self.display_ips()
            try:
                ip_id = int(input("Enter the ID of the IP: "))
                if ip_id in self.ips:
                    ip = self.ips[ip_id]
                    break
                else:
                    print("Invalid IP ID. Please re - enter.")
            except ValueError:
                print("Invalid input. Please enter a valid integer for IP ID.")

        merch_name = input("Enter the name of the merchandise to find the price: ")
        merch = ip.find_merch(merch_name)
        if merch:
            print(f"The price of merchandise with name {merch_name} is {merch.price}.")
        else:
            print(f"Merchandise with name {merch_name} not found.")

    def display_merchandise(self):
        """
        Display all the merchandise in the system for each IP.
        """
        if not self.ips:
            print("No IPs or merchandise found.")
        else:
            for ip in self.ips.values():
                print(f"\nIP: {ip.name} ({ip.category})")
                print("Official Merchandise:")
                if not ip.official_merch:
                    print("  None")
                else:
                    for merch in ip.official_merch:
                        print(f"  {merch}")
                print("Fan - made Merchandise:")
                if not ip.fan_merch:
                    print("  None")
                else:
                    for merch in ip.fan_merch:
                        print(f"  {merch}")

    def sort_merchandise_by_price(self):
        """
        Sort the merchandise of a specific IP by price and display the sorted list.
        """
        while True:
            self.display_ips()
            try:
                ip_id = int(input("Enter the ID of the IP to sort its merchandise by price: "))
                if ip_id in self.ips:
                    ip = self.ips[ip_id]
                    break
                else:
                    print("Invalid IP ID. Please re - enter.")
            except ValueError:
                print("Invalid input. Please enter a valid integer for IP ID.")

        ip.sort_merch_by_price()

    def update_ip(self):
        """
        Update the information (name and category) of an IP in the system.
        """
        while True:
            self.display_ips()
            try:
                ip_id = int(input("Enter the ID of the IP to update: "))
                if ip_id in self.ips:
                    ip = self.ips[ip_id]
                    break
                else:
                    print("Invalid IP ID. Please re - enter.")
            except ValueError:
                print("Invalid input. Please enter a valid integer for IP ID.")

        current_name = ip.name
        current_category = ip.category

        new_name = input(f"Enter new IP name (current: {current_name}, leave blank to keep): ")
        while True:
            category_input = input(
                f"Enter new IP category (current: {current_category}, R for Real - star, A for Anime): ").upper()
            if category_input == 'R':
                new_category = "Real - star"
                break
            elif category_input == 'A':
                new_category = "Anime"
                break
            elif not category_input:
                new_category = current_category
                break
            else:
                print(
                    "Invalid input. Please enter 'R' for Real - star, 'A' for Anime, or leave blank to keep current category.")

        ip.name = new_name if new_name else current_name
        ip.category = new_category

        print(f"IP with ID {ip_id} updated successfully. New name: {ip.name}, New category: {ip.category}")


def main():
    """
    The main function to run the character merchandise management system.
    It provides a menu for the user to perform various operations.
    """
    system = MerchandiseManagementSystem()
    while True:
        print("\nCharacter Merchandise Management System")
        print("1. Add IP")
        print("2. Display All IPs")
        print("3. Add Merchandise")
        print("4. Delete Merchandise")
        print("5. Update Merchandise")
        print("6. Find Merchandise")
        print("7. Find Merchandise Price")
        print("8. Display All Merchandise")
        print("9. Sort Merchandise by Price")
        print("10. Update IP")
        print("11. Exit")
        while True:
            choice = input("Enter your choice: ")
            if choice in [str(i) for i in range(1, 12)]:
                break
            print("Invalid choice. Please try again.")

        if choice == '1':
            name = input("Enter the IP name: ")
            while True:
                category_input = input("Enter the IP category (R for Real - star, A for Anime): ").upper()
                if category_input == 'R':
                    category = "Real - star"
                    break
                elif category_input == 'A':
                    category = "Anime"
                    break
                else:
                    print("Invalid input. Please enter 'R' for Real - star or 'A' for Anime.")
            system.add_ip(name, category)
        elif choice == '2':
            system.display_ips()
        elif choice == '3':
            system.add_merchandise()
        elif choice == '4':
            system.delete_merchandise()
        elif choice == '5':
            system.update_merchandise()
        elif choice == '6':
            system.find_merchandise()
        elif choice == '7':
            system.find_merchandise_price()
        elif choice == '8':
            system.display_merchandise()
        elif choice == '9':
            system.sort_merchandise_by_price()
        elif choice == '10':
            system.update_ip()
        elif choice == '11':
            print("Exiting the system.")
            break


if __name__ == "__main__":
    main()
